openapi: 3.0.0
info:
  description: Primer API.
  version: "1.0.0"
  title: Delilah Resto
servers:
  - description: Delilah Resto API
    url: https://virtserver.swaggerhub.com/ariisan123/Delilah_API/1.0.0
tags:
  - name: user
    description: Creación e inicio de sesión.
  - name: product
    description: CRUD de Productos.
  - name: order
    description: Creación y modificacion de ordenes.

paths:
  /api/signup:
    post:
      tags:
        - user
      summary: Crea un nuevo usuario.
      responses:
        "201":
          description: Usuario creado exitosamente.
          content:
            application/json:
              schema:
                type: string
                example: "Usuario creado exitosamente."
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "500":
          $ref: "#/components/responses/ServerError"
      requestBody:
        $ref: "#/components/requestBodies/NewUser"
  /api/login:
    post:
      tags:
        - user
      summary: Inicio de sesión.
      responses:
        "200":
          description: Inicio de sesión correcto.
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    example: "eyJ1c2VyX2lkIjoxLCJhZG1pbiI6MCwiYWxnIjoiSFMyNTYifQ.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiaWF0IjoxNTE2MjM5MDIyfQ.glQkGI7oxdzk5zyH7OUDQx9S_6gWPvykBz9UywEC6OE"
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          description: Contraseña incorrecta.
          content:
            application/json:
              schema:
                type: string
                example: "Contraseña incorrecta."
        "404":
          description: No existe el usuario.
          content:
            application/json:
              schema:
                type: string
                example: "No existe el usuario."
        "500":
          $ref: "#/components/responses/ServerError"
      requestBody:
        $ref: "#/components/requestBodies/Login"
  /api/products:
    get:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Lista todos los productos.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Product"
        "401":
          $ref: "#/components/responses/NotLogged"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      security:
        - bearerAuth: []
      tags:
        - product
      summary: Crea un producto.
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: string
                example: "Producto creado correctamente."
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          #$ref: "#/components/responses/NotLogged"
          $ref: "#/components/responses/NotAdmin"
        "500":
          $ref: "#/components/responses/ServerError"
      requestBody:
        $ref: "#/components/requestBodies/NewProduct"
  /api/products/{productID}:
    put:
      security:
        - bearerAuth: []
      tags:
        - product
      parameters:
        - name: productID
          in: path
          description: ID del producto.
          required: true
          schema:
            type: integer
            format: int64
      summary: Actualiza un producto.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Producto actualizado correctamente."
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/NotAdmin"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: string
                example: "Prodcuto no entontrado."
        "500":
          $ref: "#/components/responses/ServerError"
      requestBody:
        $ref: "#/components/requestBodies/NewProduct"
    delete:
      security:
        - bearerAuth: []
      tags:
        - product
      parameters:
        - name: productID
          in: path
          description: ID del producto.
          required: true
          schema:
            type: integer
            format: int64
      summary: Elimina un producto.
      responses:
        "204":
          description: OK
        "401":
          $ref: "#/components/responses/NotAdmin"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: string
                example: "Prodcuto no entontrado."
        "500":
          $ref: "#/components/responses/ServerError"
  /api/orders:
    get:
      security:
        - bearerAuth: []
      tags:
        - order
      summary: Lista ordenes del usuario.
      responses:
        "200":
          $ref: "#/components/responses/OrderArray"
        "401":
          $ref: "#/components/responses/NotLogged"
        "500":
          $ref: "#/components/responses/ServerError"
    post:
      security:
        - bearerAuth: []
      tags:
        - order
      summary: Crea un pedido
      responses:
        "201":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: Orden creada con éxito.
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/NotLogged"
        "500":
          $ref: "#/components/responses/ServerError"
      requestBody:
        $ref: "#/components/requestBodies/ProductsArray"
  /api/orders/{orderID}:
    put:
      security:
        - bearerAuth: []
      tags:
        - order
      parameters:
        - name: orderID
          in: path
          description: ID del pedido.
          required: true
          schema:
            type: integer
            format: int64
      summary: Actualiza el estado de un pedido.
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: string
                example: "Pedido actualizado correctamente."
        "400":
          $ref: "#/components/responses/InvalidRequest"
        "401":
          $ref: "#/components/responses/NotAdmin"
        "404":
          description: Not found
          content:
            application/json:
              schema:
                type: string
                example: "Pedido no entontrado."
        "500":
          $ref: "#/components/responses/ServerError"
      requestBody:
        $ref: "#/components/requestBodies/OrderStatus"

components:
  responses:
    ServerError:
      description: Error inesperado.
      content:
        application/json:
          schema:
            type: string
            example: "Error inesperado, intenta más tarde."

    InvalidRequest:
      description: Campos inválidos.
      content:
        application/json:
          schema:
            type: string
            example: "Campos inválidos."

    NotLogged:
      description: No autorizado.
      content:
        application/json:
          schema:
            type: string
            example: "Debe iniciar sesión."

    NotAdmin:
      description: No autorizado.
      content:
        application/json:
          schema:
            type: string
            example: "No tiene permisos de administrador."

    OrderArray:
      description: Ok
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/Order"

  schemas:
    Order:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        description:
          type: string
          example: "3xCheeseburger"
        total_amount:
          type: number
          format: double
          example: 17.88
        status:
          type: string
          description: Order Status
          enum:
            - pending
            - processed
            - shipped
            - delivered
          default: pending
          example: "pending"
        products:
          type: array
          items:
            $ref: "#/components/schemas/Product"
      xml:
        name: Order

    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Cheeseburger"
        description:
          type: string
          example: "Hamburguesa con medallon de 120grs y queso cheddar"
        price:
          type: integer
          format: double
          example: 3.99
        data:
          type: object
          properties:
            quantity:
              type: integer
              format: int64
              example: 3
      xml:
        name: Product

  #  User:
  #    type: object
  #    properties:
  #      id:
  #        type: integer
  #        format: int64
  #        example: 2
  #      firstname:
  #        type: string
  #        example: "John"
  #      lastname:
  #        type: string
  #        example: "Wick"
  #      username:
  #        type: string
  #        example: "wick2014"
  #      password:
  #        type: string
  #        example: "pass1234"
  #      email:
  #        type: string
  #        example: "email@mail.com"
  #      birthday:
  #        type: string
  #       format: full-date
  #        example: "1970-03-15"
  #      address:
  #        type: string
  #        example: "St Louis 122"
  #      cellphone:
  #        type: string
  #        example: "1188775566"
  #      admin:
  #        type: boolean
  #        default: false
  #    xml:
  #      name: User

  requestBodies:
    ProductsArray:
      content:
        application/json:
          schema:
            type: array
            items:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                  example: 2
                quantity:
                  type: integer
                  format: int64
                  example: 3
      description: Lista de productos del pedido.
      required: true
    NewUser:
      content:
        application/json:
          schema:
            type: object
            properties:
              firstname:
                type: string
                example: "John"
              lastname:
                type: string
                example: "Wick"
              username:
                type: string
                example: "wick2014"
              password:
                type: string
                example: "pass1234"
              email:
                type: string
                example: "email@mail.com"
              birthday:
                type: string
                format: full-date
                example: "1970-03-15"
              address:
                type: string
                example: "St Louis 122"
              cellphone:
                type: string
                example: "1188775566"
      description: Campos requeridos para la creación de un usuario.
      required: true
    Login:
      content:
        application/json:
          schema:
            type: object
            properties:
              username:
                type: string
                example: "bestuser"
              password:
                type: string
                example: "superpassword"
      description: Campos requeridos para el inicio de sesión.
      required: true
    NewProduct:
      content:
        application/json:
          schema:
            type: object
            properties:
              name:
                type: string
                example: "Cheeseburger"
              description:
                type: string
                example: "Hamburguesa con medallon de 120grs y queso cheddar"
              price:
                type: integer
                format: double
                example: 3.99
              stock:
                type: integer
                format: int64
                example: 20
    OrderStatus:
      content:
        application/json:
          schema:
            type: object
            properties:
              status:
                type: string
                enum: ["pending", "processed", "shipped", "delivered"]
                example: "shipped"

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
